import { createId } from "./create-id";
import { type ExternalClient } from "./external-client";
import { type ShoppingListEvent, type UpdateMessage } from "./schemas";
import { ShoppingList } from "./shopping-list";

export interface ServerClientConnection {
  onListChanged(payload: UpdateMessage): void;
}

interface ServerDeps {
  shoppingList: ShoppingList;
  externalClient: ExternalClient;
}

const ACTIVE_SYNC_INTERVAL = 60 * 1000; // Every minute
const INACTIVE_SYNC_INTERVAL = 10 * 60 * 1000; // Every ten minutes

type SyncMode = "active" | "inactive";

export class Server {
  clients = new Map<string, ServerClientConnection>();
  syncMode: SyncMode = "inactive";
  syncInterval!: ReturnType<typeof setInterval>;

  constructor(private $d: ServerDeps) {
    this.$d.externalClient.onEventsReturned = (events) =>
      this.pushEvents(events);

    this.setSyncMode("inactive");
  }

  setSyncMode(mode: SyncMode) {
    if (this.syncMode === mode && this.syncInterval) return;

    if (this.syncInterval) clearInterval(this.syncInterval);
    this.syncInterval = setInterval(
      () => void this.refreshDataFromExternalClient(),
      mode === "active" ? ACTIVE_SYNC_INTERVAL : INACTIVE_SYNC_INTERVAL,
    );
  }

  connectClient(client: ServerClientConnection) {
    const clientId = createId();
    this.clients.set(clientId, client);

    console.log(
      `[SERVER] ${this.clients.size} client(s) (${clientId} connected)`,
    );

    client.onListChanged({
      clientId,
      shoppingList: this.$d.shoppingList.items,
    });

    this.setSyncMode("active");
    this.refreshDataFromExternalClient();

    return clientId;
  }

  onClientDisconnected(clientId: string) {
    this.clients.delete(clientId);

    if (this.clients.size === 0) this.setSyncMode("inactive");

    console.log(
      `[SERVER] ${this.clients.size} client(s) (${clientId} disconnected)`,
    );
  }

  pushEvents(events: ShoppingListEvent[], clientId?: string) {
    const successfulEvents = this.$d.shoppingList.applyEvents(events);
    console.log(
      `[SERVER] Recieved ${events.length} event(s) from client ${clientId}. ${successfulEvents.length} of them were successful.`,
    );

    if (successfulEvents.length > 0) {
      // When clientId is missing, the events are generated by the external client
      if (clientId) this.$d.externalClient.sync(this.$d.shoppingList.items);

      // Notify other clients of changes to the list
      for (const [currentClientId, client] of this.clients.entries()) {
        if (clientId !== currentClientId)
          client.onListChanged({
            shoppingList: this.$d.shoppingList.items,
            clientId: currentClientId,
          });
      }
    }

    return this.$d.shoppingList.items;
  }

  async refreshDataFromExternalClient() {
    await this.$d.externalClient.sync(this.$d.shoppingList.items);
  }
}
