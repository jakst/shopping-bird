import { createId } from "./create-id"
import { type ShoppingListEvent, type ShoppingListItem, type UpdateMessage } from "./schemas"
import { ShoppingList } from "./shopping-list"

export interface ServerClientConnection {
	onListChanged(payload: UpdateMessage): void
}

interface ServerDeps {
	shoppingList: ShoppingList
	onSyncRequest(items: ShoppingListItem[]): Promise<void>
}

export class Server {
	clients = new Map<string, ServerClientConnection>()

	constructor(
		private $d: ServerDeps,
		public isAuthenticated: boolean,
	) {}

	connectClient(client: ServerClientConnection) {
		const clientId = createId()
		this.clients.set(clientId, client)

		console.log(`[SERVER] ${this.clients.size} client(s) (${clientId} connected)`)

		client.onListChanged({
			clientId,
			authenticated: this.isAuthenticated,
			shoppingList: this.$d.shoppingList.items,
		})

		this.refreshDataFromExternalClient()

		return clientId
	}

	onClientDisconnected(clientId: string) {
		this.clients.delete(clientId)

		console.log(`[SERVER] ${this.clients.size} client(s) (${clientId} disconnected)`)
	}

	pushEvents(events: ShoppingListEvent[], clientId?: string) {
		const successfulEvents = this.$d.shoppingList.applyEvents(events)
		console.log(
			`[SERVER] Recieved ${events.length} event(s) from client ${clientId}. ${successfulEvents.length} of them were successful.`,
		)

		if (successfulEvents.length > 0) {
			// When clientId is missing, the events are generated by the external client
			if (clientId) this.refreshDataFromExternalClient()

			// Notify other clients of changes to the list
			for (const [currentClientId, client] of this.clients.entries()) {
				if (clientId !== currentClientId)
					client.onListChanged({
						clientId: currentClientId,
						authenticated: this.isAuthenticated,
						shoppingList: this.$d.shoppingList.items,
					})
			}
		}

		return this.$d.shoppingList.items
	}

	changeAuthState(isAuthenticated: boolean) {
		this.isAuthenticated = isAuthenticated

		for (const [clientId, client] of this.clients.entries()) {
			client.onListChanged({
				clientId,
				authenticated: isAuthenticated,
				shoppingList: this.$d.shoppingList.items,
			})
		}
	}

	async refreshDataFromExternalClient() {
		await this.$d.onSyncRequest(this.$d.shoppingList.items)
	}
}
